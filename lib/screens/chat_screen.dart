import 'dart:async';
import 'dart:io';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter_chat_mock_app/utils/image_utils.dart';
import 'package:flutter_chat_mock_app/widgets/product_item.dart';
import '../models/message.dart';
import '../widgets/fade_in_wrapper.dart';
import '../widgets/fade_in_network_image.dart';
import '../theme/app_colors.dart';
import 'package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart';
import '../data/sample_products.dart';

class ChatScreen extends StatefulWidget {
  const ChatScreen({super.key});

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  WebSocket? _socket;
  final Random _random = Random();
  late final StreamSubscription<bool> _keyboardSubscription;
  // final FocusNode _focusNode = FocusNode();

  final List<Message> _messages = [];
  final TextEditingController _controller = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  // late final StreamSubscription<bool> _keyboardSubscription;

  final List<String> _botResponses = [
    'Ch√†o b·∫°n!',
    'B·∫°n ƒëang l√†m g√¨ ƒë√≥?',
    'Tr·ªùi h√¥m nay ƒë·∫πp qu√°!',
    'B·∫°n ƒÉn c∆°m ch∆∞a?',
    'T√¥i l√† chatbot gi·∫£ l·∫≠p.',
    'Flutter r·∫•t tuy·ªát!',
    'B·∫°n c·∫ßn ngh·ªâ ng∆°i ƒë√≥.',
    'C·∫£m ∆°n v√¨ ƒë√£ nh·∫Øn cho t√¥i.',
    'G·∫∑p l·∫°i sau nh√©!',
    'T√¥i l√† robot.',
    'Th·ª≠ l·∫°i xem sao!',
    'C·ªë g·∫Øng l√™n!',
  ];

  @override
  void initState() {
    super.initState();

    connectWebSocket();

    // T·∫°o h·ªôi tho·∫°i m·∫´u
    //_initializeDefaultConversation();

    // Theo d√µi s·ª± ki·ªán keyboard
    _keyboardSubscription = KeyboardVisibilityController().onChange.listen((
      bool visible,
    ) {
      if (visible) {
        _scrollToBottomRepeatedly(500, 100);
      }
    });

    // _focusNode.addListener(() {
    //   if (_focusNode.hasFocus) {
    //     //_scrollToBottomRepeatedly(500, 100);
    //     _scrollToBottomRepeatedly(500, 50);
    //     Future.delayed(const Duration(milliseconds: 500), () {
    //       _scrollToBottom(500);
    //     });
    //   }
    // });
  }

  void connectWebSocket() async {
    try {
      _socket = await WebSocket.connect('wss://efdda4f9a811.ngrok-free.app/ws');
      print('‚úÖ Connected to WebSocket');

      _socket!.listen(
        (data) {
          print('üì© Received: $data');
          setState(
            () => _messages.add(Message(text: data, isSentByUser: false)),
          );
        },
        onError: (err) => print('‚ùå Error: $err'),
        onDone: () => print('üîå Disconnected'),
      );
    } catch (e) {
      print('‚ùó WebSocket Error: $e');
    }
  }

  void _sendMessage(String text) {
    if (_socket != null && _socket!.readyState == WebSocket.open) {
      _socket!.add(text);
      setState(() => _messages.add(Message(text: text, isSentByUser: true)));
      _controller.clear();
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _scrollToBottom(500);
      });
    }
  }

  void _initializeDefaultConversation() {
    final sampleMessages = [
      'Xin ch√†o!',
      'H√¥m nay b·∫°n th·∫ø n√†o?',
      'T√¥i ƒëang h·ªçc Flutter.',
      'B·∫°n th√≠ch l·∫≠p tr√¨nh ch·ª©?',
      'Ch√∫ng ta c√πng th·ª≠ chatbot nh√©.',
    ];

    for (int i = 0; i < 5; i++) {
      _messages.add(Message(text: sampleMessages[i], isSentByUser: true));
      _messages.add(
        Message(
          text: _botResponses[_random.nextInt(_botResponses.length)],
          isSentByUser: false,
        ),
      );
    }

    // ƒê·ª£i layout ·ªïn ƒë·ªãnh r·ªìi scroll xu·ªëng
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _scrollToBottom(500);
    });
  }

  List<String> _generateSampleImages() {
    final count = _random.nextInt(7) + 4;
    return List.generate(
      count,
      (index) =>
          'https://picsum.photos/seed/image${_random.nextInt(1000)}/200/200',
    );
  }

  void _showImageFullscreen(String imageUrl) {
    showDialog(
      context: context,
      builder: (_) => GestureDetector(
        onTap: () => Navigator.pop(context),
        child: Container(
          color: AppColors.imageFullscreenBackground.withAlpha(
            (0.1 * 255).toInt(),
          ),
          child: Center(
            child: InteractiveViewer(
              panEnabled: true,
              minScale: 1,
              maxScale: 4,
              child: Image.network(imageUrl),
            ),
          ),
        ),
      ),
    );
  }

  void _scrollToBottom(int milliseconds) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: Duration(milliseconds: milliseconds),
          curve: Curves.easeOut,
        );
      }
    });
  }

  void _scrollToBottomLinear(int milliseconds) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: Duration(milliseconds: milliseconds),
          curve: Curves.linear,
        );
      }
    });
  }

  void _scrollToBottomRepeatedly(int duration, int interval) {
    int count = 0;
    int times = (duration / interval).toInt();
    final intervalDuration = Duration(milliseconds: interval);

    Timer.periodic(intervalDuration, (timer) {
      _scrollToBottomLinear(interval);
      count++;
      if (count >= times) timer.cancel();
    });
  }

  void _sendMessageFake() {
    final text = _controller.text.trim();
    if (text.isEmpty) return;

    setState(() {
      _messages.add(Message(text: text, isSentByUser: true));
    });

    _controller.clear();
    _scrollToBottom(500);

    if (text.toLowerCase() == 'items') {
      Future.delayed(const Duration(seconds: 1), () {
        setState(() {
          _messages.add(
            Message(
              text: 'ƒê√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m d√†nh cho b·∫°n:',
              isSentByUser: false,
            ),
          );
          _messages.add(
            Message(
              text: '__PRODUCTS__',
              isSentByUser: false,
              products: sampleProducts,
            ),
          );
        });
        _scrollToBottom(500);
      });
      return;
    } else if (text.toLowerCase() == 'pics') {
      Future.delayed(const Duration(seconds: 1), () {
        final images = _generateSampleImages();
        setState(() {
          _messages.add(
            Message(text: 'ƒê√¢y l√† nh·ªØng h√¨nh ·∫£nh m·∫´u:', isSentByUser: false),
          );
          _messages.add(
            Message(text: '__IMAGES__', isSentByUser: false, imageUrls: images),
          );
        });
        _scrollToBottom(500);
      });
    } else {
      Future.delayed(const Duration(seconds: 1), () {
        final response = _botResponses[_random.nextInt(_botResponses.length)];
        setState(() {
          _messages.add(Message(text: response, isSentByUser: false));
        });
        _scrollToBottom(500);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Chat')),
      resizeToAvoidBottomInset: true,
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              padding: const EdgeInsets.all(12),
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                final msg = _messages[index];
                Widget messageWidget;

                if (msg.text == '__PRODUCTS__' && msg.products != null) {
                  // final items = msg.productItems!.take(10).toList();
                  // final screenWidth = MediaQuery.of(context).size.width;
                  // final itemWidth = (screenWidth - 48) / 2.5;

                  messageWidget = Padding(
                    padding: const EdgeInsets.symmetric(vertical: 8),
                    child: SizedBox(
                      height: 180,
                      child: ListView.separated(
                        scrollDirection: Axis.horizontal,
                        itemCount: msg.products!.length,
                        separatorBuilder: (_, __) => const SizedBox(width: 8),
                        itemBuilder: (context, i) {
                          final product = msg.products![i];
                          return ProductItem(product: product);
                        },
                      ),
                    ),
                  );
                } else if (msg.text == '__IMAGES__' && msg.imageUrls != null) {
                  final displayedImages = msg.imageUrls!.take(9).toList();
                  final screenWidth = MediaQuery.of(context).size.width;
                  final imageWidth = (screenWidth - 48) / 3;

                  // messageWidget = Padding(
                  //   padding: const EdgeInsets.symmetric(vertical: 8),
                  //   child: Wrap(
                  //     spacing: 8,
                  //     runSpacing: 8,
                  //     children: displayedImages.map((url) {
                  //       return GestureDetector(
                  //         onTap: () => _showImageFullscreen(url),
                  //         child: ClipRRect(
                  //           borderRadius: BorderRadius.circular(8),
                  //           child: FadeInNetworkImage(
                  //             url: url,
                  //             width: imageWidth,
                  //             height: imageWidth,
                  //           ),
                  //         ),
                  //       );
                  //     }).toList(),
                  //   ),
                  // );

                  messageWidget = Align(
                    alignment: msg.isSentByUser
                        ? Alignment.centerRight
                        : Alignment.centerLeft,
                    child: Padding(
                      padding: const EdgeInsets.symmetric(vertical: 8),
                      child: LayoutBuilder(
                        builder: (context, constraints) {
                          final maxWidth = constraints.maxWidth * 0.8;
                          return ConstrainedBox(
                            constraints: BoxConstraints(
                              minWidth: 0,
                              maxWidth: maxWidth,
                              minHeight: imageWidth,
                              maxHeight: imageWidth,
                            ),
                            child: ListView.separated(
                              scrollDirection: Axis.horizontal,
                              itemCount: displayedImages.length,
                              separatorBuilder: (_, __) =>
                                  const SizedBox(width: 8),
                              shrinkWrap: true,
                              itemBuilder: (context, i) {
                                final url = displayedImages[i];
                                return GestureDetector(
                                  onTap: () => _showImageFullscreen(url),
                                  child: ClipRRect(
                                    borderRadius: BorderRadius.circular(8),
                                    child: url.startsWith('http')
                                        ? FadeInNetworkImage(
                                            url: url,
                                            width: imageWidth,
                                            height: imageWidth,
                                          )
                                        : Image.file(
                                            File(url),
                                            width: imageWidth,
                                            height: imageWidth,
                                            fit: BoxFit.cover,
                                          ),
                                  ),
                                );
                              },
                            ),
                          );
                        },
                      ),
                    ),
                  );
                } else {
                  messageWidget = Align(
                    alignment: msg.isSentByUser
                        ? Alignment.centerRight
                        : Alignment.centerLeft,
                    child: Container(
                      margin: const EdgeInsets.symmetric(vertical: 4),
                      padding: const EdgeInsets.all(10),
                      decoration: BoxDecoration(
                        color: msg.isSentByUser
                            ? AppColors.messageUser
                            : AppColors.messageBot,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(msg.text),
                    ),
                  );
                }
                return FadeInWrapper(child: messageWidget);
              },
            ),
          ),
          const Divider(height: 1),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                IconButton(
                  icon: const Icon(Icons.image, color: Colors.white),
                  onPressed: () async {
                    final List<String> imagePaths =
                        await pickAndCompressMultipleImages();
                    if (imagePaths.isNotEmpty) {
                      setState(() {
                        _messages.add(
                          Message(
                            text: '__IMAGES__',
                            isSentByUser: true,
                            imageUrls: imagePaths,
                          ),
                        );
                      });
                      _scrollToBottom(500);
                    }
                  },
                ),
                Expanded(
                  // child: GestureDetector(
                  //   behavior: HitTestBehavior.translucent,
                  //   onTap: () {
                  //     WidgetsBinding.instance.addPostFrameCallback((_) {
                  //       _scrollToBottomRepeatedly(500, 100);
                  //     });
                  //   },
                  child: TextField(
                    controller: _controller,
                    // focusNode: _focusNode,
                    decoration: InputDecoration(
                      hintText: 'Nh·∫≠p tin nh·∫Øn...',
                      fillColor: AppColors.textFieldFill,
                      filled: true,
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 12,
                      ),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(20),
                        borderSide: BorderSide.none,
                      ),
                    ),
                  ),
                  // ),
                ),
                const SizedBox(width: 8),
                CircleAvatar(
                  backgroundColor: AppColors.sendButton,
                  child: IconButton(
                    icon: const Icon(Icons.send, color: Colors.white),
                    //onPressed: _sendMessageFake,
                    onPressed: () {
                      _sendMessage(_controller.text);
                    },
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _keyboardSubscription.cancel();
    // _focusNode.dispose();
    _controller.dispose();
    _scrollController.dispose();
    _socket?.close();
    super.dispose();
  }
}
